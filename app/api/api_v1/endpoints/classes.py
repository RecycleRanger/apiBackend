from typing import Any, Union, Callable, TypeVar

from fastapi import APIRouter, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordRequestForm
from sqlalchemy.orm.session import Session

from app.api import deps
from app.crud import student
from app.models.teacher import Teacher
from app.models.student import Student
from app import schemas
from app.core.myTypes import UsrType, CurrentUsr, GeneratedPassCode
from app.core.passwordGenerator import get_passwords
from app import crud


router = APIRouter()

User = TypeVar("User", Teacher, Student)

credential_error: Callable[[str], Any] = lambda msg: HTTPException(
    status_code=status.HTTP_401_UNAUTHORIZED,
    detail=msg,
)

@router.get("/{teacher_id}")
def get_class(
        teacher_id: int,
        skip: int = 0,
        limit: int = 100,
        db: Session = Depends(deps.get_db),
        current_user: CurrentUsr = Depends(deps.get_user)
) -> Any:
    """
    Get all the Students of a class
    """

    if current_user.type == UsrType.teacher:
        teacher_usr: Teacher = current_user.user
        if teacher_usr.id == teacher_id:
            return student.get_class(
                db=db,
                class_id=teacher_id,
                skip=skip,
                limit=limit,
            )
        else:
            raise credential_error("You are trying to access a class that doesn't belong to you.")

    elif current_user.type == UsrType.student:
        student_usr: Student = current_user.user
        class_id: int = int(student_usr.class_id) # type: ignore
        if class_id == teacher_id:
            return student.get_class_cens(
                db=db,
                class_id=teacher_id,
                skip=skip,
                limit=limit,
            )
        else:
            raise credential_error("You are trying to access a class you are not a member of.")
    raise credential_error("You don't have access to this information. Please log in.")

@router.post("/autogenerate/{num}")
def post_autogenerate_class(
        num: int,
        skip: int = 0,
        limit: int = 100,
        db: Session = Depends(deps.get_db),
        current_user: CurrentUsr = Depends(deps.get_user),
) -> list[GeneratedPassCode]:
    """
    Create `num` of Students with autogenerated password and returns the passwords
    """

    if current_user.type == UsrType.teacher:
        teacher_id = current_user.user.id
        if crud.teacher.update_datetime(db=db, teacher_id=teacher_id):
            res: list[GeneratedPassCode] = []
            passwords: list[str] = get_passwords(num)

            for i in range(num):
                student_out = crud.student.create(
                    db=db,
                    obj_in=schemas.StudentCreate(
                        class_id=teacher_id,
                        score=0,
                        password=passwords[i]
                    )
                )
                res.append(GeneratedPassCode(
                    student_id=student_out.id,
                    passcode=passwords[i]
                ))
            return res

    raise credential_error("You are not authorized to make this action. Please log in.")
